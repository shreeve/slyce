#!/usr/bin/env ruby

STDOUT.sync = true

require "mysql2"
require "optparse"

trap("INT" ) { abort "\n" }

dbas = nil
tabl = nil

OptionParser.new.instance_eval do
  @version = "1.3.5"
  @banner  = "usage: #{program_name} [options] <database> <table>"

  on       "--csv"                    , "Output comma separated values"
  on       "--psv"                    , "Output pipe separated values"
  on       "--tsv"                    , "Output tab separated values"
  on "-a", "--ascii"                  , "Convert data to ASCII using AnyAscii"
  on "-c", "--columns"                , "Display column names and quit"
  on "-d", "--dump"                   , "Dump database schema and quit"
  on "-h", "--help"                   , "Show help and command usage" do Kernel.abort to_s; end
  on "-n", "--natural"                , "Sort naturally, not numerically"
  on "-r", "--rows <count>"           , "Rows of data to show", Integer
  on "-s", "--suppress"               , "Suppress header when exporting delimited files"
  on "-t", "--tables"                 , "Display table names and quit"
  on "-v", "--version"                , "Show version number" do Kernel.abort "#{program_name} #{@version}"; end
  on "-w", "--where <cond>"           , "Where clause (eg - 'age>50 and state='AZ')"
  on "-x", "--extract <a,b,c...>"     , "Comma separated list of columns or tables to extract"

  self
end.parse!(into: opts={}) rescue abort($!.message)

xcsv = opts[:csv]
xpsv = opts[:psv]
xtsv = opts[:tsv]
xprt = xcsv || xpsv || xtsv and require "censive"

asky = opts[:ascii   ] and require "any_ascii"
dump = opts[:dump]
want = opts[:extract ].to_s.downcase.split(",")
natu = opts[:natural ]
show = opts[:rows    ]
hide = opts[:suppress]
filt = opts[:where   ] and filt = "\nwhere\n  #{filt}"

dbas ||= ARGV.shift or abort "no database given"
tabl ||= ARGV.shift or opts[:tables] or !want.empty? or abort "no table given"

[xcsv, xpsv, xtsv].compact.size > 1 and abort "only one of csv, psv, or tsv allowed"

# ==[ Helpers ]==

class Mysql2::Client
  alias_method :sql, :query

  def sql!(stmt, *args, **opts, &block)
    puts "\n==[ SQL statement ]==\n\n", stmt.strip, ";"
    sql(stmt, *args, **opts, &block)
  end
end

def display(name, data, show, uniq, tots)
  seen = data.inject(0) {|seen, coun| seen += coun[0] }
  rows = [data.size, seen].min
  wide = tots.to_s.size
  fill = " " * wide
  line = "=" * name.size

  puts "\n#{fill} #{name}\n#{fill} #{line}\n"
  data.each {|cnt, val| puts "%*d %s" % [wide, cnt, val || "NULL"] }
  puts "#{fill} -----\n"
  puts "%*d shown (top %d)" % [wide, seen, rows] if     show && rows > 1
  puts "%*d total (all %d)" % [wide, tots, uniq] if     uniq > 1
  puts "%*d total"          % [wide, tots      ] unless uniq > 1
end

# ==[ Let 'er rip! ]==

# get database connection
if !dbas.include?("/")
  conf = { database: dbas }
else
  dbas = $' if dbas =~ %r|^mysql://| # drop mysql:// prefix, if present
  auth, dbas = dbas.split("/", 2)
  if auth =~ /^(?:(\w+)(?::([^@]+))?@)?(?:([^:]+)?(?::(\d+))?)$/
    user, pass, host, port = $1, $2, $3, $4 # user:pass@host:port
    conf = {
      database: dbas,
      username: $1,
      password: $2,
      host:     $3,
      port:     $4,
    }.compact
  else
    abort "invalid database value #{dbas.inspect}"
  end
end

# connect to database and get server version
conn = Mysql2::Client.new(**conf, as: :array)
conn.sql("set session sql_mode='ansi'") # ANSI double-quotes
ver5 = conn.server_info[:version] =~ /^5/

# dump database schema or show table names
if tabl.nil? || opts[:tables] || opts[:dump]

  # get table names
  resu = conn.sql("show tables")
  tbls = resu.to_a.flatten
  want = (want.empty? || opts[:tables] || opts[:dump]) ? tbls : want.select {|e| tbls.include?(e) }

  # dump database schema
  if opts[:dump]
    pict = "%Y-%m-%dT%H:%M:%S%z"
    puts "-- Dump of \"#{dbas}\" database on #{Time.now.strftime(pict)}\n\n"
    puts "set foreign_key_checks=0;\n\n" unless want.empty?
    tail = []
    want.each do |name|
      text = conn.sql("show create table \"#{name}\"").to_a.flatten[1] + ";\n\n"
      if text =~ /^create table/i
        puts text
      elsif text.gsub!(/^(create ).*?(?=view)/i, '\1')
        tail << text
      end
    end
    puts tail.join unless tail.empty?
    puts "set foreign_key_checks=1;\n\n" unless want.empty?
    exit
  end

  # show table names
  puts want
  exit
end

# get column names
resu = conn.sql("select * from \"#{tabl}\" limit 0")
cols = resu.fields
want = want.empty? ? cols : want.select {|e| cols.include?(e) }

if opts[:columns]
  puts cols
  exit
end

if want.empty?
  abort "no columns are selected"
end

# handle exports
if xprt
  stmt = show ? "limit #{show}" : ""
  data = conn.sql(<<~"" + stmt).to_a
  list = want.map {|item| %{"#{item}"} }.join(", ")
    select
      #{list}
    from
      "#{tabl}"
    #{filt}

  seps = xcsv ? "," : xtsv ? "\t" : xpsv ? "|" : abort("unknown separator #{seps.inspect}")

  Censive.write(sep: seps) do |csv|
    csv << want unless hide
    data.each do |row|
      csv << row.map {|e| asky ? AnyAscii.transliterate(e.to_s) : e.to_s }
    end
  end

  exit
end

want.each do |name|
  sort = natu ? "" : "cnt desc,"
  like =(ver5 ? <<~"" : <<~"").gsub(/(.)^/m, '\1  ').rstrip
    -if(("#{name}" rlike '^[-+]?((0|([1-9][0-9]*)(\\\\.[0-9]*)?)|((0|([1-9][0-9]*))\\\\.[0-9]+))$'), "#{name}" + 0, null) desc,
    -if(("#{name}" rlike '^0[0-9]+$'), length("#{name}"), null) desc,
    -if(("#{name}" rlike '^[0-9]'), length(concat('1', "#{name}") + 0), null) desc,

    -if(regexp_like("#{name}", '^[-+]?((0|([1-9]\\\\d*)(\\\\.\\\\d*)?)|((0|([1-9]\\\\d*))\\\\.\\\\d+))$'), "#{name}" + 0, null) desc,
    -if(regexp_like("#{name}", '^0\\\\d+$'), length("#{name}"), null) desc,
    -if(regexp_like("#{name}", '^\\\\d'), regexp_instr("#{name}", '[^\\\\d]'), null) desc,

  data = conn.sql(<<~"".rstrip).to_a
    select
      count(*) as cnt,
      "#{name}" as val
    from
      "#{tabl}"#{filt}
    group by
      val
    order by #{sort}
      #{like}
    #{show ? "limit #{show}" : ""}
      "#{name}" is null, "#{name}"

  uniq, tots = conn.sql(<<~"".rstrip).to_a[0]
    select
      count(distinct(ifnull("#{name}",0))),
      count(ifnull("#{name}",0))
    from
      "#{tabl}"

  display(name, data, show, uniq, tots)
end
