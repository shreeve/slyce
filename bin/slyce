#!/usr/bin/env ruby

VERSION="1.0.1"

STDOUT.sync = true

require "mysql2"
require "optparse"

trap("INT" ) { abort "\n" }

dbas = nil
tabl = nil

OptionParser.new.instance_eval do
  @banner  = "usage: #{program_name} [options] <database> <table>"

  on "-c", "--columns"                , "Display column names and quit"
  on "-h", "--help"                   , "Show help and command usage" do Kernel.abort to_s; end
  on "-n", "--natural"                , "Sort naturally, not numerically"
  on "-s", "--show <count>"           , "Show this many values", Integer
  on "-v", "--version"                , "Show version number" do Kernel.abort "#{program_name} #{VERSION}"; end
  on "-w", "--where <cond>"           , "Where clause (eg - 'age>50 and state='AZ')"
  on "-x", "--extract <col1,col2,...>", "Comma separated list of columns to extract"

  self
end.parse!(into: opts={}) rescue abort($!.message)

filt = opts[:where] and filt = "where\n  #{filt}"
natu = opts[:natural]
show = opts[:show]
want = opts[:extract].to_s.downcase.split(",")

dbas ||= ARGV.shift or abort "no database given"
tabl ||= ARGV.shift or abort "no table given"

# ==[ Helpers ]==

class Mysql2::Client
  alias_method :sql, :query

  def sql!(stmt, *args, **, &)
    puts "\n==[ SQL statement ]==\n\n", stmt.strip, ";"
    sql(stmt, *args, **, &)
  end
end

def display(name, data, show, uniq, tots)
  seen = data.inject(0) {|seen, coun| seen += coun[0] }
  rows = [data.size, seen].min
  wide = tots.to_s.size
  fill = " " * wide
  line = "=" * name.size

  puts "\n#{fill} #{name}\n#{fill} #{line}\n"
  data.each {|cnt, val| puts "%*d %s" % [wide, cnt, val || "NULL"] }
  puts "#{fill} -----\n"
  puts "%*d shown (top %d)" % [wide, seen, rows] if show && rows > 1
  puts "%*d total (all %d)" % [wide, tots, uniq]
end

# ==[ Let 'er rip! ]==

conn = Mysql2::Client.new(database: dbas, as: :array)
resu = conn.query("select * from `#{tabl}` limit 0")
cols = resu.fields
want = want.empty? ? cols : want & cols

if opts[:columns]
  puts cols
  exit
end

if want.empty?
  abort "no columns are selected"
end

want.each do |name|
  sort = natu ? "" : "cnt desc,"
  stmt = show ? "limit #{show}" : ""
  data = conn.sql(<<~"" + stmt).to_a
    select
      count(*) as cnt,
      `#{name}` as val
    from
      `#{tabl}`
    #{filt}
    group by
      val
    order by #{sort}
      -if(regexp_like(`#{name}`, '^[-+]?((0|([1-9]\\\\d*)(\\\\.\\\\d*)?)|((0|([1-9]\\\\d*))\\\\.\\\\d+))$'), `#{name}` + 0, null) desc,
      -if(regexp_like(`#{name}`, '^0\\\\d+$'), length(`#{name}`), null) desc,
      -if(regexp_like(`#{name}`, '^\\\\d'), regexp_instr(`#{name}`, '[^\\\\d]'), null) desc,
      `#{name}` is null, `#{name}`

  uniq, tots = conn.sql(<<~"").to_a[0]
    select
      count(distinct(ifnull(`#{name}`,0))),
      count(ifnull(`#{name}`,0))
    from
      `#{tabl}`
    #{filt}

  display(name, data, show, uniq, tots)
end
